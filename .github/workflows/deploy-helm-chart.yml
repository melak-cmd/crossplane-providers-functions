name: Deploy Helm Chart

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch
  pull_request:
    branches:
      - main  # Optional: Trigger the workflow on pull requests to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'  # Specify the Helm version you want to use

    - name: Install k3d
      run: |
        curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash

    - name: Generate random cluster name
      id: random-name
      run: echo "CLUSTER_NAME=cluster-$(openssl rand -hex 4)" >> $GITHUB_ENV

    - name: Create k3d cluster without Traefik and LoadBalancer
      run: k3d cluster create ${{ env.CLUSTER_NAME }} --k3s-arg "--disable=traefik@server:0" --no-lb

    - name: Helm lint
      run: helm lint ./

    - name: Install Helm unittest plugin
      run: helm plugin install https://github.com/quintush/helm-unittest

    - name: Run Helm unit tests
      run: helm unittest ./

    - name: Install Crossplane
      run: |
        kubectl create namespace crossplane-system
        helm repo add crossplane-stable https://charts.crossplane.io/stable
        helm repo update
        helm install crossplane --namespace crossplane-system crossplane-stable/crossplane

    - name: Wait for Crossplane to be ready
      run: |
        kubectl wait --for=condition=available --timeout=600s deployment/crossplane --namespace crossplane-system

    - name: Render Helm templates and dry run with kubectl
      run: helm template . -g | kubectl apply -f - --dry-run=server

    - name: Delete k3d cluster
      run: k3d cluster delete ${{ env.CLUSTER_NAME }}

    - name: Configure Git user, get chart version, create tag, and increment version
      if: success()
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}
        CHART_VERSION=$(git log -1 --pretty=%B | grep -oP '(?<=version: )\d+\.\d+\.\d+' || echo "0.0.0")
        echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_ENV
        git tag -a "v${CHART_VERSION}" -m "Release version ${CHART_VERSION}"
        git push origin "v${CHART_VERSION}"
        NEW_VERSION=$(echo $CHART_VERSION | awk -F. -v OFS=. '{$NF++;print}')
        sed -i "s/^version: .*/version: $NEW_VERSION/" Chart.yaml
        git add Chart.yaml
        git commit -m "Increment chart version to $NEW_VERSION"
        git push origin main